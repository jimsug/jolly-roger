name: Build and Package Extension

on:
  push:
    tags:
      - "v*.*.*" # This workflow now runs when you push a tag like v1.0.0
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use a modern LTS version
          cache: "npm"
          cache-dependency-path: "extension/package-lock.json"

      - name: Install dependencies
        working-directory: ./extension
        run: npm install

      - name: Build extension
        working-directory: ./extension
        run: npm run build

      - name: List files in extension/dist after build
        if: always()
        working-directory: ./extension
        run: ls -R dist/

      - name: Package Chrome Extension
        id: package_chrome
        working-directory: ./extension
        # This step now also extracts the extension ID needed for the update manifest
        env:
          CRX_PRIVATE_KEY: ${{ secrets.CRX_PRIVATE_KEY }}
        run: |
          if [ -n "$CRX_PRIVATE_KEY" ]; then
            echo "Private key found. Packaging as .crx..."
            echo "$CRX_PRIVATE_KEY" > private-key.pem
            CRX_OUTPUT=$(npx crx3 dist/chrome -o dist/jolly-roger-chrome.crx -p private-key.pem)
            echo "$CRX_OUTPUT"
            CRX_ID=$(echo "$CRX_OUTPUT" | grep -oP 'ID: \K\w+')
            echo "CRX_ID=$CRX_ID" >> $GITHUB_ENV
            rm private-key.pem
          fi

      - name: Generate Chrome Update Manifest
        if: env.CRX_ID
        working-directory: ./extension
        run: |
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v} # remove 'v' prefix
          cat > dist/update_manifest.xml <<EOL
          <?xml version='1.0' encoding='UTF-8'?>
          <gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
            <app appid='${{ env.CRX_ID }}'>
              <updatecheck codebase='https://github.com/deathandmayhem/jolly-roger/releases/download/${{ github.ref_name }}/jolly-roger-chrome.crx' version='${VERSION}' />
            </app>
          </gupdate>
          EOL

      - name: Generate Firefox Update Manifest
        working-directory: ./extension
        run: |
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v} # remove 'v' prefix
          cat > dist/updates.json <<EOL
          {
            "addons": {
              "{2bf7bc48-4f7d-4c16-9a88-58bb9f1c6ff5}": {
                "updates": [
                  {
                    "version": "${VERSION}",
                    "update_link": "https://github.com/deathandmayhem/jolly-roger/releases/download/${{ github.ref_name }}/jolly-roger-firefox.xpi"
                  }
                ]
              }
            }
          }
          EOL

      - name: List files in extension/dist before release
        if: always()
        working-directory: ./extension
        run: ls -R dist/

      - name: Create Release and Upload Artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            extension/dist/jolly-roger-chrome.zip
            extension/dist/jolly-roger-chrome.crx
            extension/dist/jolly-roger-firefox.xpi
            extension/dist/update_manifest.xml
            extension/dist/updates.json
          generateReleaseNotes: true
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          # and is required to create a release.
          token: ${{ secrets.GITHUB_TOKEN }}